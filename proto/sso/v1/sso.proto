syntax = "proto3";

package sso.v1;

import "google/protobuf/timestamp.proto";
import "model/v1/model.proto";

/**
 * Сервис аутентификации и управления сессиями
 */
service AuthService {
    /**
     * Регистрация нового пользователя
     * Требует: username, email, password
     * Возвращает: токены и профиль пользователя
     */
    rpc Register(RegisterRequest) returns (RegisterResponse);
    
    /**
     * Аутентификация пользователя
     * Поддерживает: email/password, username/password
     * Возвращает: токены доступа и профиль
     */
    rpc Login(LoginRequest) returns (LoginResponse);
    
    /**
     * Проверка валидности access token
     * Используется для авторизации запросов между сервисами
     */
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
    
    /**
     * Обновление токенов доступа
     * Требует: валидный refresh_token
     * Возвращает: новую пару токенов
     */
    rpc RefreshTokens(RefreshTokensRequest) returns (RefreshTokensResponse);
    
    /**
     * Завершение сессии
     * Инвалидирует оба токена (добавляет в revocation list)
     */
    rpc Logout(LogoutRequest) returns (LogoutResponse);
}

// ========== Регистрация ========== //

message RegisterRequest {
    string username = 1;    // Обязательное, 3-30 символов
    string email = 2;       // Обязательное, валидный email
    string password = 3;    // Минимум 8 символов, буквы+цифры
}

message RegisterResponse {
    model.v1.OperationStatus status = 1;  // Статус операции
    model.v1.AuthTokens tokens = 2;       // Сгенерированные токены
    model.v1.UserProfile profile = 3;      // Профиль пользователя
}

// ========== Аутентификация ========== //

message LoginRequest {
    oneof identifier {
        string username = 1;  // Логин пользователя
        string email = 2;      // Email пользователя
    }
    string password = 3;      // Пароль в открытом виде
}

message LoginResponse {
    model.v1.OperationStatus status = 1;  // Статус операции
    model.v1.AuthTokens tokens = 2;       // Сгенерированные токены
    model.v1.UserProfile profile = 3;      // Профиль пользователя
}

// ========== Валидация токена ========== //

message ValidateTokenRequest {
    string access_token = 1;  // JWT из заголовка Authorization
}

message ValidateTokenResponse {
    model.v1.OperationStatus status = 1;     // Результат проверки
    optional model.v1.UserProfile user = 2;   // Профиль (при успешной проверке)
    optional google.protobuf.Timestamp expires_at = 3;  // Срок действия токена
}

// ========== Обновление токенов ========== //

message RefreshTokensRequest {
    string refresh_token = 1;  // Токен из безопасного хранилища
    string device_id = 2;      // Идентификатор устройства (опционально)
}

message RefreshTokensResponse {
    model.v1.OperationStatus status = 1;
    model.v1.AuthTokens tokens = 2;  // Новая пара токенов
}

// ========== Завершение сессии ========== //

message LogoutRequest {
    string access_token = 1;   // Текущий access token
    string refresh_token = 2;  // Текущий refresh token
}

message LogoutResponse {
    model.v1.OperationStatus status = 1;  // Статус операции
}